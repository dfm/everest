The Everest Pipeline
--------------------

Below are the basic instructions for reproducing the :py:obj:`everest` catalog. For
large photometric surveys like :py:obj:`K2`, processing all light curves will take
a lot of time and a lot of computing power. It took on the order of 100,000 CPU hours
to generate the catalog for :py:obj:`K2` campaigns 0-8.

.. warning :: Users do not need to follow these instructions, unless they wish to \
              tweak model parameters and generate catalogs of their own. Most users \
              will simply want to interface with the existing catalog. See the \
              :doc:`user interface <ui>` section.

1. Download the data
====================

Each :py:obj:`everest` mission implements its own functionality for interfacing
with the raw data. For :py:obj:`K2`, individual raw light curves can be downloaded
by running

.. code-block :: python

   everest.missions.k2.GetData(EPIC, download_only = True)

Batch downloading for entire campaigns is implemented for individual missions.
For :py:obj:`K2`, you can submit a PBS job to a cluster with
:py:func:`everest.missions.k2.pbs.Download`.

2. De-trend the data
====================

Individual light curves can be de-trended by instantiating one of the :py:obj:`everest` models:

.. code-block :: python

   everest.nPLD(EPIC, **kwargs)

Currently, the available models are :py:class:`everest.nPLD <everest.detrender.nPLD>`, 
:py:class:`everest.sPLD <everest.detrender.sPLD>`, :py:class:`everest.pPLD <everest.detrender.pPLD>`, and
the experimental :py:class:`everest.iPLD <everest.detrender.iPLD>`. These are all subclasses
of the :py:class:`everest.detrender.Detrender` class, which accepts a bunch
of keyword arguments.

De-trending generates a :py:obj:`.log` log file, a :py:obj:`.npz` model file,
and a :py:obj:`.pdf` data validation summary (DVS) file. These are all stored
in the directory given by the :py:func:`TargetDirectory` function of the mission
(for :py:obj:`K2`, see :py:func:`everest.k2.TargetDirectory <everest.missions.k2.k2.TargetDirectory>`).

Batch de-trending is also implemented for individual missions.
For :py:obj:`K2`, see :py:func:`everest.missions.k2.pbs.Run`.

.. note :: You can check the status of the de-trending of each :py:obj:`K2` \
           campaign with the :py:func:`everest.k2.Status <everest.missions.k2.pbs.Status>` function. \
           This is also implemented as the :py:obj:`everest-status` command line \
           utility in :py:obj:`everest/bin`.

3. Compute CBVs
===============

Co-trending basis vectors (CBVs) can be computed for each of the :py:obj:`K2`
campaigns once they are done running. To do this, run 
:py:func:`everest.k2.GetCBVs <everest.missions.k2.sysrem.GetCBVs>`
on each campaign. This will compile all of the de-trended light curves and
compute the top signals that are shared among all light curves using :py:mod:`SysRem <everest.missions.k2.sysrem>`.

4. Publish
==========

FITS files can be generated by instantiating an :py:obj:`everest` model and calling
its :py:meth:`publish <everest.detrender.Detrender.publish>` method. This step also
corrects light curves with the CBVs and updates the DVS figure.

.. raw:: html

  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-47070068-2', 'auto');
    ga('send', 'pageview');

  </script>