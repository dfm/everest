#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
k2stats
-------

'''

import argparse
from everest.config import EVEREST_DEV
import logging
log = logging.getLogger(__name__)

if __name__ == '__main__':

  parser = argparse.ArgumentParser(prog = 'estats', add_help = True)
  parser.add_argument("campaign", nargs = '?', type = str, default = None, help = 'The K2 campaign to download')
  parser.add_argument("model", nargs = '?', type = str, default = None, help = 'The everest model to analyze')
  parser.add_argument("compare_to", nargs = '?', type = str, default = None, help = 'The model to compare to')
  parser.add_argument("-i", "--inject", action = 'store_true', help = 'Run injection stats?')
  parser.add_argument("-m", "--mission", type = str, default = 'k2', help = 'Mission to analyze')
  parser.add_argument("-s", "--short", action = 'store_true', help = 'Short cadence?')
  parser.add_argument("-p", "--planets", action = 'store_true', help = 'Planet hosts only?')
  args = parser.parse_args()
  
  # Get the mission
  from everest import missions
  from everest.utils import InitLog
  Statistics = getattr(missions, args.mission).Statistics
  InitLog(None, logging.CRITICAL, logging.DEBUG, False)
  
  # Get the cadence
  if args.short:
    cadence = 'sc'
  else:
    cadence = 'lc'
  
  # Get the campaign number
  if args.campaign is not None:
    if '.' in args.campaign:
      campaign = float(args.campaign)
    else:
      campaign = int(args.campaign)
  else:
    campaign = None
  
  # Injection run?
  if args.inject:
    args.compare_to = None
    injection = True
  else:
    injection = False
    
  # Dev version hack
  clobber = False
  plot = True
  if EVEREST_DEV:
    import platform
    if platform.system() == "Linux":
      clobber = True
      plot = False
  
  # Call the stats function
  if campaign is not None:
    if args.model is not None:
      if args.compare_to is not None:
        Statistics(campaign = campaign, model = args.model, compare_to = args.compare_to, injection = injection, clobber = clobber, plot = plot, cadence = cadence, planets = args.planets)
      else:
        Statistics(campaign = campaign, model = args.model, injection = injection, clobber = clobber, plot = plot, cadence = cadence, planets = args.planets)
    else:
      if args.compare_to is not None:
        Statistics(campaign = campaign, compare_to = args.compare_to, injection = injection, clobber = clobber, plot = plot, cadence = cadence, planets = args.planets)
      else:
        Statistics(campaign = campaign, injection = injection, clobber = clobber, plot = plot, cadence = cadence, planets = args.planets)
  else:
    if args.model is not None:
      if args.compare_to is not None:
        Statistics(model = args.model, compare_to = args.compare_to, injection = injection, clobber = clobber, plot = plot, cadence = cadence, planets = args.planets)
      else:
        Statistics(model = args.model, injection = injection, clobber = clobber, plot = plot, cadence = cadence, planets = args.planets)
    else:
      if args.compare_to is not None:
        Statistics(compare_to = args.compare_to, injection = injection, clobber = clobber, plot = plot, cadence = cadence, planets = args.planets)
      else:
        Statistics(injection = injection, clobber = clobber, plot = plot, cadence = cadence, planets = args.planets)